function [pOpt, Info] = parameterEstimation_VTC6_Sim(p)
%PARAMETERESTIMATION_VTC6_SIM
%
% Solve a parameter estimation problem for the VTC6_Sim model.
%
% The function returns estimated parameter values, pOpt,
% and estimation termination information, Info.
%
% The input argument, p, defines the model parameters to estimate,
% if omitted the parameters specified in the function body are estimated.
%
% Modify the function to include or exclude new experiments, or
% to change the estimation options.
%
% Auto-generated by SPETOOL on 06-Feb-2020 19:27:30.
%

%% Open the model.
open_system('VTC6_Sim')

%% Specify Model Parameters to Estimate
%
if nargin < 1
    p = [];
end

%% Define the Estimation Experiments
%

Exp = sdo.Experiment('VTC6_Sim');

%%
% Specify the measured experiment output data.
Exp_Sig_Output = Simulink.SimulationData.Signal;
Exp_Sig_Output.Values    = getData('Exp_Sig_Output_Value');
Exp_Sig_Output.BlockPath = 'VTC6_Sim/Cell';
Exp_Sig_Output.PortType  = 'outport';
Exp_Sig_Output.PortIndex = 1;
Exp_Sig_Output.Name      = 'Cell_Voltage';
Exp.OutputData = Exp_Sig_Output;

%%
% Specify experiment specific parameters.
Param = sdo.getParameterFromModel('VTC6_Sim','R0_est');
Exp.Parameters = Param;

%%
% Create a model simulator from an experiment
Simulator = createSimulator(Exp);
%%
% Add experiment specific parameters/states to the list of parameters
% to estimate.
s = getValuesToEstimate(Exp);
p = [p; s];

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls VTC6_Sim_optFcn.
optimfcn = @(P) VTC6_Sim_optFcn(P,Simulator,Exp);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.OptimizedModel = Simulator;
Options.Method = 'lsqnonlin';
Options.UseParallel = true;
[dirs, files] = sdo.getModelDependencies('VTC6_Sim');
files = vertcat(files, 'C:\Users\PcElettronicaDynamis\Desktop\Mattia\parameterEstimation_VTC6_Sim.m');
Options.ParallelFileDependencies = files;

%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%%
% Update the experiments with the estimated parameter values.
Exp = setEstimatedValues(Exp,pOpt);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('VTC6_Sim',pOpt(1:0));
end

function Vals = VTC6_Sim_optFcn(P,Simulator,Exp)
%VTC6_SIM_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
Exp = setEstimatedValues(Exp,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.

F_r = [];
Simulator = createSimulator(Exp,Simulator);
Simulator = sim(Simulator);

SimLog = find(Simulator.LoggedData,get_param('VTC6_Sim','SignalLoggingName'));
Sig = find(SimLog,Exp.OutputData.Name);

Error = evalRequirement(r,Sig.Values,Exp.OutputData.Values);
F_r = [F_r; Error(:)];

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end

function Data = getData(DataID)
%GETDATA
%
% Helper function to store data used by parameterEstimation_VTC6_Sim.
%
% The input, DataID, specifies the name of the data to retrieve. The output,
% Data, contains the requested data.
%

SaveData = load('parameterEstimation_VTC6_Sim_Data');
Data = SaveData.Data.(DataID);
end
